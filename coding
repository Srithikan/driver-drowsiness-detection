import cv2
import time
import winsound  # Import the winsound module for playing sound

# Load cascade classifiers for face and eye detection
face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
eye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')

# Initialize video capture from webcam
cap = cv2.VideoCapture(0)

# Define the frequency and duration of the alert sound (in milliseconds)
alert_frequency = 2500  # 2500 Hz
alert_duration = 1000   # 1 second

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the grayscale frame
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    # Loop through each detected face
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = frame[y:y+h, x:x+w]

        # Detect eyes within the face region
        eyes = eye_cascade.detectMultiScale(roi_gray)

        # If no eyes are detected, assume the driver is sleeping
        if not len(eyes):
            t = 0
            while not len(eyes):
                t += 1
                if t > 5:   # If no eyes are detected for more than 5 frames
                    print("Driver is sleeping!")
                    # Play the alert sound
                    winsound.Beep(alert_frequency, alert_duration)
                    time.sleep(2)  # Wait for 2 seconds to avoid continuous alerts
                    break

        # Draw rectangles around the detected eyes
        for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(roi_color, (ex, ey), (ex+ew, ey+eh), (0, 255, 0), 2)

    # Display the frame with rectangles drawn around faces and eyes
    cv2.imshow('frame', frame)
    
    # Check for 'q' key press to exit the loop
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object
cap.release()

# Close all OpenCV windows
cv2.destroyAllWindows()
